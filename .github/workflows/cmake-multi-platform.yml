name: Build FFmpegTest

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswscale-dev \
          libsdl2-dev \
          pkg-config \
          cmake \
          build-essential
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg sdl2 pkg-config cmake
    
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Verify Windows libraries exist
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path "FFmpegTest/ffmpeg/lib/avcodec.lib")) {
          Write-Error "FFmpeg libraries not found! Make sure to commit the Windows libraries to the repo."
          exit 1
        }
        if (!(Test-Path "FFmpegTest/sdl2/lib/SDL2.lib")) {
          Write-Error "SDL2 libraries not found! Make sure to commit the Windows libraries to the repo."
          exit 1
        }
      shell: powershell
    
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}
    
    - name: Test executable exists
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          if [ -f "build/${{ matrix.build_type }}/FFmpegTest.exe" ]; then
            echo "✅ Windows executable built successfully"
          else
            echo "❌ Windows executable not found"
            exit 1
          fi
        else
          if [ -f "build/FFmpegTest" ]; then
            echo "✅ Unix executable built successfully"
          else
            echo "❌ Unix executable not found"
            exit 1
          fi
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FFmpegTest-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/FFmpegTest*
          build/${{ matrix.build_type }}/FFmpegTest*
        retention-days: 30
    
    - name: Upload Windows DLLs
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FFmpegTest-Windows-DLLs-${{ matrix.build_type }}
        path: |
          FFmpegTest/ffmpeg/bin/*.dll
          FFmpegTest/sdl2/bin/*.dll
        retention-days: 30
    
    - name: Collect and upload shared libraries (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p shared-libs/macos
        # Get FFmpeg dylibs
        cp $(brew --prefix ffmpeg)/lib/libav*.dylib shared-libs/macos/ || true
        cp $(brew --prefix ffmpeg)/lib/libsw*.dylib shared-libs/macos/ || true
        # Get SDL2 dylibs  
        cp $(brew --prefix sdl2)/lib/libSDL2*.dylib shared-libs/macos/ || true
        ls -la shared-libs/macos/
    
    - name: Upload macOS dylibs
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FFmpegTest-macOS-dylibs-${{ matrix.build_type }}
        path: shared-libs/macos/*.dylib
        retention-days: 30
    
    - name: Collect and upload shared libraries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p shared-libs/linux
        # Find and copy FFmpeg shared libraries
        find /usr/lib* -name "libav*.so*" -exec cp {} shared-libs/linux/ \; 2>/dev/null || true
        find /usr/lib* -name "libsw*.so*" -exec cp {} shared-libs/linux/ \; 2>/dev/null || true
        # Find and copy SDL2 shared libraries
        find /usr/lib* -name "libSDL2*.so*" -exec cp {} shared-libs/linux/ \; 2>/dev/null || true
        ls -la shared-libs/linux/
    
    - name: Upload Linux shared objects
      if: matrix.os == 'ubuntu-latest' 
      uses: actions/upload-artifact@v4
      with:
        name: FFmpegTest-Linux-so-${{ matrix.build_type }}
        path: shared-libs/linux/*.so*
        retention-days: 30
    
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Display structure
      run: ls -la
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.sha }}
        release_name: Build ${{ github.sha }}
        draft: false
        prerelease: true